# -*- coding: utf-8 -*-
"""Rachel's Trip

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1toNd5tltAdu5lrbbWFfx1OHS599DotzY
"""

# Function \(O<O)/

def AskNum(B = [], L = [], Q = 'Input a value below!') : # Input and filters so that ONLY numbers is outputted in the return slot
  # B -> A list full of banned letters to restrict the number of strings possible and to prevent number values that might not be wanted
  # L -> A list of two items, the first is the minumim length of the string. Second is the maximum length of the string
  # Q -> A string used as the question for the input

  OTN = [str(x) for x in range(10)] # Stores one to nine stringfied within a list
  Hold = '' # Stores an input
  LS = 0 # Counts the zeros that exist before a number that isn't zero or a letter(i guess...)

  while True : # Repeatly ask an input until the return command is played
    Hold = input(f'{Q}\n> ') # Stores the input given

    for x in Hold : # Loops for each letters within the variable Hold
      if x == '0' : # If the letter is 0 then...
        LS += 1 # Add one to the variable LS
      else :
        break
    
    Hold = Hold[LS:] # Cuts the Hold variable from the value of LS to the end of the string within the Hold variable
    if '0S' in B and Hold == '': # If the word '0S' is in the banned list and Hold variable is empty then fill the Hold variable with 0 which if not banned then will return the answer as 0
      Hold == '0'
    elif Hold == '' :
      print('\033[0;32;1m The request permits the usage of 0 as an input to the question \033[0;37;0m') # Reason of exception printed in bolded green
    LS = 0 # Resets the LS for later use

    if L == [] : # If empty then there's no limit for length
      pass
    elif (len(Hold) > L[1] and L[1] != -1) or len(Hold) < L[0] : # If the elif is fulfilled then the Hold variable contain a string that doesn't fit the description
      print(f'\033[0;32;1m Please insert a number within the expect length limit \n\t==> Minimum = {L[0]},\n\t--> Maximum = {L[1]}\033[0;37;0m') # The reasonable size of the Input
      Hold = '' # Empties the variable holding the inputted string

    for x in range(len(Hold)) : # Loops for each letters within the variable Hold
      if (Hold[x] in B or Hold in B) and not (Hold == '0' and 'OS' in B) : # Checks if the letter or the whole thing is within the banned list
        print(f'\033[0;32;1m Please insert a number that doesn\'t contain these integers\n\t=> {B}\033[0;37;0m') # Reason of exception printed in bolded green
        Hold = ''
        break

      elif Hold[x] in OTN : # If the letter is not in banned and is in the OTN list 
        pass
      
      else :
        print(f'\033[0;32;1m Please insert ONLY numbers\n\tException => index {x} of {Hold}\n\t\t  => {Hold[:x]} >({Hold[x]})< {Hold[x+1 :]}\033[0;37;0m') # Reason of exception printed in bolded green
        Hold = ''
        break
    
    if Hold != '' :
      return int(Hold) # Ensured to always be Integers

# Problem 1 :
# Make a program that calculates the factorial of any number. Take the input from the user.

Factorial_Total = '' # The result of the n! of the number inputted

Factorial_Number = AskNum([], [],'Please input a number! and i will find it\'s factorial') # Input and storing of the n from !n

print(f'{Factorial_Number}! = ', end='') # Printing the factorial formula

for x in range(1, Factorial_Number + 1) : # Loops starting from 1 until the Factorial_Number's value itself
  if Factorial_Total == '' : # Ensures that later multiplication wont just be empty * number
    Factorial_Total = x # Replaces the empty string with the first x

  else :
    Factorial_Total = Factorial_Total * x # Execute the multiplication one by one

  if x == Factorial_Number : # Once the x is equal to the Factorial_Name then...
    print(f'{x} = {Factorial_Total}') # Print the last of the multiplication and also the total or result of the Factorial

  else :
    print(x, end=' * ') # Else prints the x and a multiplication symbol to show the whole multiplication formula

# Problem 2 :
# Make a program that prints the first n Fibonacci numbers and finds the sum of the first 10 Fibonacci numbers.

Fn = 1 # Current number of the Fibonacci sequence
Nindex = 0 # N index or the index of the last number of sequence
List_Fn = [0, 1] # This list consisting of every fibonacci numbers up to the last index
Ten_Total = 0 # Total of the first ten fibonacci number

print('n defines the very last Fibonacci step.\nFor example, Fn = the nth Fibonacci Number. F3 = the 3rd Fibonacci Number') # Information
Nindex = AskNum([], [2, -1], 'What will be your n number.') # Ask a number that's atleast 2 digits long
print('Counting Fibonacci sequence with starting letters -> 1') # Confirmation of the starting of the fibonacci sequence

for x in range(Nindex-1) : # Loops to find the (Nindex)th fibonacci number
  Fn += List_Fn[len(List_Fn)-2] # Current number + Previous number to find the next number
  List_Fn.append(Fn) # Appends the Result of the previous script to build a fibonacci sequence

print(f'So the {Nindex}th Fibonacci numbers is => {Fn}\n=> And also here\'s a list of all the steps\n   -> {List_Fn}') # Results containing the n fibonacci and the whole Fibonacci Sequence until the n fibonacci

for x in range(11) : # Loops 11 times(because the fibonacci sequence starts at index 0) and adds up all the numbers from 0 - 10 to find the sum of the first 10 fibonacci numbers
  Ten_Total += List_Fn[x] # Adding the numbers

print(f'And this is the total of the first 10 Fibonacci numbers => {Ten_Total}') # Results

# Problem 3 :
# Write a python program to find if the given string is symmetrical or not and if it is symmetrical then find the length of the string and print the triangular pattern of it.

First_Half = '' # Stores first half of the string taken using [:Middle_Index]
Last_Half = '' # Stores Last half of the string taken using [Middle_Index:] if the length of the string is even or [Middle_Index + 1:] if the length of the string is odd
Reversed_Last_Half = '' # Stores reversed version of the last half of the string
Middle_Index = 0 # Stores the index that determines the middle of the string.
String = input('Please input a string\n=> ') # Stores the inputted string text from the user

if len(String) % 2 == 1 : # Determines if the string's length is even or odd
  Middle_Index = int((len(String) - 1) / 2) # Calculates the index of the middle string for a string with an odd length
  Last_Half = String[Middle_Index + 1:] # Cuts the last half of the string for a string with an odd length

else :
  Middle_Index = int(len(String) / 2) # Calculates the index of the middle string for a string with an even length
  Last_Half = String[Middle_Index:] # Cuts the last half of the string for a string with an even length

First_Half = String[:Middle_Index] # Cuts the first half of the string

for x in Last_Half : # Loops for each letter in the Last_Half variable
  Reversed_Last_Half = x + Reversed_Last_Half # Letter by letter, builds the reverse of the Last_Half string

if First_Half == Reversed_Last_Half : # Checks if the reversed string of Last_Half is the same as First_Half's string. If it is then 
  print(f'The string is symmetrical :) so...\n  => Here\'s the length of your string {len(String)}\n  => And here\'s the a triangular pattern of the string\\/') # Results

  for x in range(len(String)+1) : # The loop that generates the triangle
    for n in range(x) : # The loop that generates a growing letters
      print(String[n], end = ' ') # Prints a letter from the entire string
    print(end = '\n\t\t') # Creates a new line for the next step

else :
  print('Sadly the string is not symmetrical :(') # The string is not symmetrical